{"version":3,"sources":["reportWebVitals.ts","components/features/CatList/useStyles.ts","components/base/MasterCard/useStyles.ts","components/base/MasterCard/index.tsx","components/features/CatList/index.tsx","components/hooks/useQuery.ts","components/base/BreedSelect/useStyles.tsx","components/base/BreedSelect/index.tsx","components/features/SelectInputSection/index.tsx","components/base/LoadMoreButton/index.tsx","components/base/PageContainer/useStyles.ts","components/base/PageContainer/index.tsx","constants.ts","components/hooks/useFetchBreeds.ts","components/hooks/useRefValue.ts","components/hooks/useFetchCats.ts","components/pages/HomePage/useStyles.ts","components/pages/HomePage/index.tsx","components/base/DetailsCard/useStyles.ts","components/base/DetailsCard/index.tsx","components/hooks/useFetchSingleCat.ts","components/pages/DetailsPage/index.tsx","components/App/useStyles.ts","components/App/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","makeStyles","createStyles","noCatsCol","marginBottom","card","cardBody","padding","button","width","MasterCard","catId","imageUrl","classes","useStyles","Card","className","Img","variant","src","Body","to","Button","CatList","cats","length","map","cat","Col","md","sm","xs","React","memo","useQuery","URLSearchParams","useLocation","search","formGroup","BreedSelect","breeds","onSelectBreed","query","handleSelect","useCallback","event","target","value","Form","Group","onChange","Label","Select","defaultValue","get","breed","id","name","SelectInputSection","loading","error","rest","Alert","LoadMoreButton","onClick","disabled","container","maxWidth","PageContainer","children","Container","constants","catApi","useFetchBreeds","useState","setLoading","setError","response","setResponse","fetchBreeds","axios","res","data","catch","err","finally","useEffect","useRefValue","ref","useRef","current","useFetchCats","breedId","isEndOfPage","setIsEndOfPage","page","setPage","prevBreedId","isBreedIdChanged","useMemo","fetchCats","newCats","url","filtered","filter","item","index","array","findIndex","loadMore","select","HomePage","currentBreedId","setCurrentBreedId","breedsLoading","breedsError","catsLoading","catsError","handleSelectBreed","Row","header","DetailsCard","origin","temperament","description","Header","pathname","useFetchSingleCat","fetchCat","DetailsPage","window","location","root","paddingTop","paddingBottom","App","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d11ed4a3.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    noCatsCol: {\n      marginBottom: 20,\n    },\n  })\n\nexport default makeStyles(styles)\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    card: {\n      marginBottom: 20,\n    },\n    cardBody: {\n      padding: 20,\n    },\n    button: {\n      width: '100%',\n    },\n  })\n\nexport default makeStyles(styles)\n","import React from 'react'\n\nimport { Link } from 'react-router-dom'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\n\nimport useStyles from './useStyles'\n\nexport interface MasterCardProps {\n  /**\n   * A cat's unique identifier, or slug\n   */\n  catId: string\n\n  /**\n   * A picture url of your little furry friend 😍\n   */\n  imageUrl: string\n}\n\nexport const MasterCard: React.FC<MasterCardProps> = ({ catId, imageUrl }) => {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.card}>\n      <Card.Img variant=\"top\" src={imageUrl} />\n      <Card.Body className={classes.cardBody}>\n        <Link to={`/${catId}`}>\n          <Button className={classes.button}>View Details</Button>\n        </Link>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default MasterCard\n","import React from 'react'\nimport Col from 'react-bootstrap/Col'\n\nimport { Cat } from '../../../models'\nimport useStyles from './useStyles'\nimport MasterCard from '../../base/MasterCard'\n\nexport interface CatListProps {\n  /**\n   * List of cats\n   */\n  cats: Cat[]\n}\n\nexport const CatList: React.FC<CatListProps> = ({ cats }) => {\n  const classes = useStyles()\n\n  if (!cats.length) {\n    return (\n      <Col className={classes.noCatsCol} xs={12}>\n        No cats available\n      </Col>\n    )\n  }\n\n  return (\n    <>\n      {cats.map((cat) => (\n        <Col key={cat.catId} md={3} sm={6} xs={12}>\n          <MasterCard {...cat} />\n        </Col>\n      ))}\n    </>\n  )\n}\n\nexport default React.memo(CatList)\n","import { useLocation } from 'react-router-dom'\n\n/**\n * Hook to get the search param in the url\n * @returns the query value\n */\nconst useQuery = () => {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default useQuery\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    formGroup: {\n      marginBottom: '1rem',\n    },\n  })\n\nexport default makeStyles(styles)\n","import React, { useCallback } from 'react'\nimport Form from 'react-bootstrap/Form'\n\nimport { Breed } from '../../../models'\nimport useQuery from '../../hooks/useQuery'\nimport useStyles from './useStyles'\n\nexport interface BreedSelectProps {\n  /**\n   *  List of cat breeds\n   */\n  breeds: Breed[]\n\n  /**\n   *  Callback when selecting a breed\n   */\n  onSelectBreed: (breedId: string) => void\n}\n\nexport const BreedSelect: React.FC<BreedSelectProps> = ({\n  breeds,\n  onSelectBreed,\n}) => {\n  const query = useQuery()\n  const classes = useStyles()\n\n  const handleSelect = useCallback(\n    (event) => onSelectBreed(event.target.value),\n    [onSelectBreed],\n  )\n\n  return (\n    <Form.Group className={classes.formGroup} onChange={handleSelect}>\n      <Form.Label>Breed</Form.Label>\n      <Form.Select defaultValue={query.get('breed') || ''}>\n        <option>Select breed</option>\n        {breeds.map((breed) => (\n          <option value={breed.id} key={breed.id}>\n            {breed.name}\n          </option>\n        ))}\n      </Form.Select>\n    </Form.Group>\n  )\n}\n\nexport default React.memo(BreedSelect)\n","import React from 'react'\nimport Alert from 'react-bootstrap/Alert'\n\nimport BreedSelect, { BreedSelectProps } from '../../base/BreedSelect'\n\nexport interface SelectInputSectionProps extends BreedSelectProps {\n  /**\n   * Flag whether the list is currently being fetched\n   */\n  loading: boolean\n\n  /**\n   * Flag if there is an error while fetching data\n   */\n  error: boolean\n}\n\nexport const SelectInputSection: React.FC<SelectInputSectionProps> = ({\n  loading,\n  error,\n  ...rest\n}) => {\n  if (loading) {\n    return <h2>Loading...</h2>\n  }\n\n  if (error || !rest.breeds.length) {\n    return (\n      <Alert variant=\"warning\">\n        Sorry. Can't fetch breed list right now, Meow! 😿\n      </Alert>\n    )\n  }\n\n  return <BreedSelect {...rest} />\n}\n\nexport default SelectInputSection\n","import React from 'react'\n\nimport Button from 'react-bootstrap/Button'\n\nexport interface LoadMoreButtonProps {\n  /**\n   * Callback function when user clicks the button\n   */\n  onClick: () => void\n\n  /**\n   * Flag whether it is currently fetching data from API\n   */\n  loading?: boolean\n\n  /**\n   * Flag whether the button should be disabled or not\n   */\n  disabled?: boolean\n}\n\nexport const LoadMoreButton: React.FC<LoadMoreButtonProps> = ({\n  onClick,\n  loading,\n  disabled,\n}) => (\n  <Button disabled={disabled || loading} variant=\"success\" onClick={onClick}>\n    {loading ? 'Loading cats...' : 'Load more'}\n  </Button>\n)\n\nexport default LoadMoreButton\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    container: {\n      padding: '0px 15px',\n\n      '@media (min-width: 576px)': {\n        maxWidth: '540px',\n      },\n      '@media (min-width: 768px)': {\n        maxWidth: '720px',\n      },\n      '@media (min-width: 992px)': {\n        maxWidth: '960px',\n      },\n      '@media (min-width: 1200px)': {\n        maxWidth: '1140px',\n      },\n    },\n  })\n\nexport default makeStyles(styles)\n","import React from 'react'\n\nimport Container from 'react-bootstrap/Container'\n\nimport useStyles from './useStyles'\n\nexport interface PageContainerProps {\n  children: React.ReactNode\n}\n\nexport const PageContainer: React.FC<PageContainerProps> = ({ children }) => {\n  const classes = useStyles()\n\n  return <Container className={classes.container}>{children}</Container>\n}\n\nexport default PageContainer\n","const constants = {\n  catApi: 'https://api.thecatapi.com/v1',\n}\n\nexport default constants\n","import { useCallback, useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport constants from '../../constants'\nimport { Breed } from '../../models'\n\ninterface FetchBreedsResult {\n  loading: boolean\n  error: string\n  response: Breed[]\n}\n\n/**\n * Hook for fetching Cat Breeds\n * @returns\n */\nconst useFetchBreeds = (): FetchBreedsResult => {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [response, setResponse] = useState<Breed[]>([])\n\n  const fetchBreeds = useCallback(() => {\n    axios\n      .get(`${constants.catApi}/breeds`)\n      .then((res) => {\n        const breeds: Breed[] = res.data.map((breed: any) => ({\n          id: breed.id,\n          name: breed.name,\n        }))\n\n        setResponse(breeds)\n      })\n      .catch((err) => setError(err))\n      .finally(() => setLoading(false))\n  }, [])\n\n  /**\n   * Start fetching as soon as the component mounts\n   */\n  useEffect(() => fetchBreeds(), [fetchBreeds])\n\n  return { loading, error, response }\n}\n\nexport default useFetchBreeds\n","import { useEffect, useRef } from 'react'\n\n/**\n * Hook for tracking if the value is changed\n * @param value the value to track\n * @returns the previous value derived from useRef\n */\nconst useRefValue = <Tvalue>(value: Tvalue) => {\n  const ref = useRef<Tvalue>()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default useRefValue\n","import { useEffect, useState, useCallback, useMemo } from 'react'\nimport axios from 'axios'\n\nimport useRefValue from './useRefValue'\nimport constants from '../../constants'\nimport { Cat } from '../../models'\n\ninterface FetchCatsResult {\n  loading: boolean\n  isEndOfPage: boolean\n  error: string\n  response: Cat[]\n  loadMore: () => void\n}\n\n/**\n * Hook for fetching Cat information depending on the breedId\n * @param breedId a Cat breed identification\n * @returns\n */\nconst useFetchCats = (breedId: string | null): FetchCatsResult => {\n  const [loading, setLoading] = useState(false)\n  const [isEndOfPage, setIsEndOfPage] = useState(false)\n  const [error, setError] = useState('')\n  const [response, setResponse] = useState<Cat[]>([])\n  const [page, setPage] = useState(1)\n\n  const prevBreedId = useRefValue(breedId)\n\n  /**\n   * Keep track if breedId is changed\n   */\n  const isBreedIdChanged = useMemo(() => prevBreedId !== breedId, [\n    prevBreedId,\n    breedId,\n  ])\n\n  const fetchCats = useCallback(() => {\n    setLoading(true)\n\n    if (isBreedIdChanged) {\n      setIsEndOfPage(false)\n      setResponse([])\n    }\n\n    axios\n      .get(\n        `${constants.catApi}/images/search?page=${page}&limit=10&breed_id=${breedId}`,\n      )\n      .then((res) => {\n        const newCats: Cat[] = res.data.map(\n          (cat: any) =>\n            ({\n              catId: cat.id,\n              imageUrl: cat.url,\n            } as Cat),\n        )\n\n        const updated = isBreedIdChanged ? newCats : [...response, ...newCats]\n\n        // make sure there are no duplicates\n        const filtered = updated.filter(\n          (item, index, array) =>\n            array.findIndex((current) => current.catId === item.catId) ===\n            index,\n        )\n\n        if (response.length === filtered.length && !isBreedIdChanged) {\n          setIsEndOfPage(true)\n        }\n\n        setResponse(filtered)\n      })\n      .catch((err) => setError(err))\n      .finally(() => {\n        setPage(page + 1)\n        setLoading(false)\n      })\n  }, [breedId, page, isBreedIdChanged, response])\n\n  /**\n   * Fetch cats on component mount\n   */\n  useEffect(() => {\n    if (!breedId) return\n\n    if (isBreedIdChanged) {\n      fetchCats()\n    }\n  }, [breedId, fetchCats, isBreedIdChanged])\n\n  return {\n    loading,\n    error,\n    response,\n    loadMore: fetchCats,\n    isEndOfPage,\n  }\n}\n\nexport default useFetchCats\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    select: {\n      padding: '10px 0px',\n    },\n  })\n\nexport default makeStyles(styles)\n","import React, { useCallback, useState } from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Alert from 'react-bootstrap/Alert'\n\nimport CatList from '../../features/CatList'\nimport SelectInputSection from '../../features/SelectInputSection'\nimport LoadMoreButton from '../../base/LoadMoreButton'\nimport PageContainer from '../../base/PageContainer'\n\nimport useFetchBreeds from '../../hooks/useFetchBreeds'\nimport useFetchCats from '../../hooks/useFetchCats'\nimport useQuery from '../../hooks/useQuery'\n\nimport useStyles from './useStyles'\n\nexport const HomePage: React.FC = () => {\n  const query = useQuery()\n\n  const [currentBreedId, setCurrentBreedId] = useState<string | null>(\n    query.get('breed'),\n  )\n  const classes = useStyles()\n\n  const {\n    loading: breedsLoading,\n    error: breedsError,\n    response: breeds,\n  } = useFetchBreeds()\n\n  const {\n    loading: catsLoading,\n    error: catsError,\n    response: cats,\n    loadMore,\n    isEndOfPage,\n  } = useFetchCats(currentBreedId)\n\n  const handleSelectBreed = useCallback(\n    (breedId: string) => setCurrentBreedId(breedId),\n    [],\n  )\n\n  return (\n    <PageContainer>\n      <h1>Cat Browser</h1>\n      <Row className={classes.select}>\n        <Col md={3} sm={6} xs={12}>\n          <SelectInputSection\n            loading={breedsLoading}\n            error={!!breedsError}\n            breeds={breeds}\n            onSelectBreed={handleSelectBreed}\n          />\n        </Col>\n      </Row>\n      <Row>\n        {catsError ? (\n          <Col md={3} sm={6} xs={12}>\n            <Alert variant=\"warning\">\n              Apologies but we could not load new cats for you at this time!\n              Meow! 🐱\n            </Alert>\n          </Col>\n        ) : (\n          <CatList cats={cats} />\n        )}\n      </Row>\n\n      {!isEndOfPage && (\n        <Row>\n          <Col md={3} sm={6} xs={12}>\n            <LoadMoreButton\n              onClick={loadMore}\n              loading={catsLoading}\n              disabled={!cats.length}\n            />\n          </Col>\n        </Row>\n      )}\n    </PageContainer>\n  )\n}\n\nexport default HomePage\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    header: {\n      padding: 16,\n    },\n  })\n\nexport default makeStyles(styles)\n","import React from 'react'\n\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport { Link } from 'react-router-dom'\n\nimport { Cat } from '../../../models'\nimport useStyles from './useStyles'\n\nexport interface DetailsCardProps extends Cat {}\n\nexport const DetailsCard: React.FC<DetailsCardProps> = ({\n  id,\n  name,\n  origin,\n  temperament,\n  description,\n  imageUrl,\n}) => {\n  const classes = useStyles()\n\n  return (\n    <Card>\n      <Card.Header className={classes.header}>\n        <Link\n          to={{\n            pathname: '/',\n            search: `?breed=${id}`,\n          }}\n        >\n          <Button>Back</Button>\n        </Link>\n      </Card.Header>\n      <Card.Img src={imageUrl} />\n      <Card.Body>\n        <h4>{name}</h4>\n        <h5>{`Origin: ${origin}`}</h5>\n        <h6>{temperament}</h6>\n        <p>{description}</p>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default DetailsCard\n","import { useCallback, useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport constants from '../../constants'\nimport { Cat } from '../../models'\n\ninterface FetchSingleCatResult {\n  loading: boolean\n  error: string\n  response?: Cat\n}\n\n/**\n * Hook for fetching a Cat\n * @returns\n */\nconst useFetchSingleCat = (catId: string): FetchSingleCatResult => {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const [response, setResponse] = useState<Cat>()\n\n  const fetchCat = useCallback(() => {\n    axios\n      .get(`${constants.catApi}/images${catId}`)\n      .then((res) => {\n        const [breed] = res.data.breeds\n\n        const cat: Cat = {\n          catId,\n          id: breed.id,\n          description: breed.description,\n          imageUrl: res.data.url,\n          name: breed.name,\n          origin: breed.origin,\n          temperament: breed.temperament,\n        }\n\n        setResponse(cat)\n      })\n      .catch((err) => setError(err))\n      .finally(() => setLoading(false))\n  }, [catId])\n\n  /**\n   * Start fetching as soon as the component mounts\n   */\n  useEffect(() => fetchCat(), [fetchCat])\n\n  return { loading, error, response }\n}\n\nexport default useFetchSingleCat\n","import React from 'react'\nimport Alert from 'react-bootstrap/Alert'\n\nimport DetailsCard from '../../base/DetailsCard'\nimport PageContainer from '../../base/PageContainer'\n\nimport useFetchSingleCat from '../../hooks/useFetchSingleCat'\n\nexport const DetailsPage: React.FC = () => {\n  const { loading, error, response } = useFetchSingleCat(\n    window.location.pathname,\n  )\n\n  if (error) {\n    return (\n      <PageContainer>\n        <Alert variant=\"warning\">\n          I can't fetch cat details right now. Damn, it hurts right here in my\n          meow meow 😿\n        </Alert>\n      </PageContainer>\n    )\n  }\n\n  return (\n    <PageContainer>\n      {loading || !response ? (\n        <h5>Loading...</h5>\n      ) : (\n        <DetailsCard {...response} />\n      )}\n    </PageContainer>\n  )\n}\n\nexport default DetailsPage\n","import createStyles from '@material-ui/styles/createStyles'\nimport makeStyles from '@material-ui/styles/makeStyles'\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: 20,\n      paddingBottom: 20,\n    },\n  })\n\nexport default makeStyles(styles)\n","import React from 'react'\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport HomePage from '../pages/HomePage'\nimport DetailsPage from '../pages/DetailsPage'\nimport useStyles from './useStyles'\n\nexport const App: React.FC = () => {\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={() => <HomePage />} />\n          <Route path=\"/:catId\" render={() => <DetailsPage />} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}